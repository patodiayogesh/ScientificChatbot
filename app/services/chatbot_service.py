import yaml
import json
import logging
from opik import track
from opik.integrations.genai import track_genai
from app.services.agent import Agent
from app.settings import get_settings
from app.services.recipe import PdfInformationRecipe
from app.services.tools.agent_tools import UrlFetchFirebaseDBPythonExamplesTool

settings = get_settings()
logger = logging.getLogger(__name__)


class ChatbotService:
    def __init__(self):

        self.agent = None

    def load_prompt_from_file(self, file_path: str):
        """
        Load the prompt from a YAML file.

        :param file_path: Path to the YAML file containing the prompt.
        :return: Loaded prompt as a dictionary.
        """
        try:
            with open(file_path, 'r') as file:
                prompt = yaml.safe_load(file)
            return prompt
        except Exception as e:
            raise ValueError(f"Error loading prompt from file: {e}")

    def load_agents(self, db_schema: PdfInformationRecipe = None):

        prompt = self.load_prompt_from_file(settings.DB_AGENT_PROMPT_FILE_PATH)
        try:
            if "firestore_db_schema"  in prompt:
                prompt["firestore_db_schema"] = json.dumps(db_schema.model_json_schema())
        except Exception as e:
            logger.info(f"Error loading firestore db schema: {e}")

        self.db_agent = Agent(
            name="Database Agent",
            description="An agent to interact with the google cloud firebase database and retrieve information.",
            model_name=settings.DB_AGENT_MODEL,  # Replace with actual model name
            prompt=prompt,  # Load prompt from file
            tools={
                "fetch_firebase_db_python_examples": UrlFetchFirebaseDBPythonExamplesTool()
            }  # Define tools if needed
        )


    @track("chatbot_service.get_response")
    def get_response(self, query: str, db_service=None):
        """
        Get a response from the chatbot for a given message.
        """
        if not query:
            raise ValueError("Query cannot be empty.")

        self.load_agents(PdfInformationRecipe)

        # Get the response from the chatbot
        response = self.db_agent.execute(query)

        if not response:
            raise ValueError("No response generated by the chatbot.")

        return response